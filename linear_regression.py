# -*- coding: utf-8 -*-
"""Linear regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T2fghkN2TAtmYIRhqRjMIQLvxtGRh9Iv
"""

import numpy as np
from sklearn.linear_model import LinearRegression
X = np.array([[1], [2], [3], [4]])
y = [3,5,7,9]
reg = LinearRegression().fit(X, y)
reg.score(X, y)

reg.coef_

reg.intercept_

reg.predict(np.array([[5]]))

import numpy as np
from sklearn.linear_model import LinearRegression
X = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])
# y = 1 * x_0 + 2 * x_1 + 3
y = [6,8,9,11]
reg = LinearRegression().fit(X, y)
reg.score(X, y)

reg.coef_

reg.intercept_

reg.predict(np.array([[3, 5]]))



# Commented out IPython magic to ensure Python compatibility.
print(__doc__)

import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score

# Load the diabetes dataset
diabetes_X, diabetes_y = datasets.load_diabetes(return_X_y=True)

# Use only one feature
diabetes_X = diabetes_X[:, np.newaxis, 2]

# Split the data into training/testing sets
diabetes_X_train = diabetes_X[:-20]
diabetes_X_test = diabetes_X[-20:]

# Split the targets into training/testing sets
diabetes_y_train = diabetes_y[:-20]
diabetes_y_test = diabetes_y[-20:]

# Create linear regression object
regr = linear_model.LinearRegression()

# Train the model using the training sets
regr.fit(diabetes_X_train, diabetes_y_train)

filename="linear_model.sav"
joblib.dump(regr,"linear_model.sav")
loaded_model=joblib.load("linear_model.sav")
result=loaded_model.score(diabetes_X_test,diabetes_y_test)
print(result)

# Make predictions using the testing set
diabetes_y_pred = regr.predict(diabetes_X_test)
# diabetes_y_pred = linear_model(diabetes_X_test)

# The coefficients
print('Coefficients: \n', regr.coef_)
# The mean squared error
print('Mean squared error: %.2f'
#       % mean_squared_error(diabetes_y_test, diabetes_y_pred))
# The coefficient of determination: 1 is perfect prediction
print('Coefficient of determination: %.2f'
#       % r2_score(diabetes_y_test, diabetes_y_pred))


# Plot outputs
plt.scatter(diabetes_X_test, diabetes_y_test,  color='black')
plt.plot(diabetes_X_test, diabetes_y_pred, color='blue', linewidth=3)

# plt.xticks(())
# plt.yticks(())

plt.show()

# Commented out IPython magic to ensure Python compatibility.
_import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets, linear_model
from sklearn.metrics  import mean_squared_error, r2_score

diabetes_X, diabetes_y= datasets.load_diabetes(return_X_y=True)

diabetes_X=diabetes_X[:, np.newaxis, 2]

diabetes_X_train=diabetes_X[: -20]
diabetes_X_test=diabetes_X[-20:]

diabetes_y_train=diabetes_y[: -20]
diabetes_y_test=diabetes_y[-20 :]


reg=linear_model.LinearRegression()

reg.fit(diabetes_X_train, diabetes_y_train)
diabetes_y_pred= reg.predict(diabetes_X_test)

print('Coefficients: ', reg.coef_)
print('Mean Squared Error: %.2f'
#      % mean_squared_error(diabetes_y_test, diabetes_y_pred))
print('Coefficient of determination: %.2f'
#      % r2_score(diabetes_y_test, diabetes_y_pred))

plt.scatter(diabetes_X_test, diabetes_y_test, color='black')
plt.plot(diabetes_X_test,diabetes_y_pred, color='blue', linewidth=3)
plt.xticks(())
plt.yticks(())

plt.show()

from sklearn.neural_network import MLPClassifier
# from sklearn.datasets import make_classification
# from sklearn.model_selection import train_test_split

# X,y= make_classification(n_samples=100, random_state=1)
# X_train,X_test,y_train,y_test= train_test_split(X,y)

X=[[0. , 0.],[1.,1.]]
y=[0. , 1]

clf=MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(5,2), random_state=1)
clf.fit(X,y)

clf.predict([[1.,2.]])

clf=MLPClassifier (random_state=1, max_iter=300).fit(X_train, y_train)

clf.predict_proba(X_test[:1])

print('CLf.score:',clf.score(X_test,y_test))